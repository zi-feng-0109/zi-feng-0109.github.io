<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>子_封`Blog</title>
  
  <subtitle>人生到处知何似，应似飞鸿踏雪泥。</subtitle>
  <link href="https://zi-feng-0109.github.io/atom.xml" rel="self"/>
  
  <link href="https://zi-feng-0109.github.io/"/>
  <updated>2023-04-11T07:09:05.353Z</updated>
  <id>https://zi-feng-0109.github.io/</id>
  
  <author>
    <name>子封</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>virtualenv虚拟环境的安装和flask的安装</title>
    <link href="https://zi-feng-0109.github.io/posts/ce0a578a.html"/>
    <id>https://zi-feng-0109.github.io/posts/ce0a578a.html</id>
    <published>2023-04-11T06:26:04.000Z</published>
    <updated>2023-04-11T07:09:05.353Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="注：以下演示均为Windows10下进行，Linux另行查找，不过能熟练使用Linux开发的，应该不会用到这篇博客。"><a href="#注：以下演示均为Windows10下进行，Linux另行查找，不过能熟练使用Linux开发的，应该不会用到这篇博客。" class="headerlink" title="注：以下演示均为Windows10下进行，Linux另行查找，不过能熟练使用Linux开发的，应该不会用到这篇博客。"></a>注：以下演示均为Windows10下进行，Linux另行查找，<del>不过能熟练使用Linux开发的，应该不会用到这篇博客</del>。</h2><h1 id="1、安装virtualenv环境"><a href="#1、安装virtualenv环境" class="headerlink" title="1、安装virtualenv环境"></a>1、安装virtualenv环境</h1><p>安装virtualenv需要<em><strong>管理员权限</strong></em>，这里以powershell为例。</p><p>如下，以<em><strong>管理员权限</strong></em>启动powershell，或者cmd也行。</p><p><a href="https://imgse.com/i/ppLqCdS"><img src="https://s1.ax1x.com/2023/04/11/ppLqCdS.png" alt="ppLqCdS.png"></a></p><p>打开如下：</p><p><a href="https://imgse.com/i/ppLqmLV"><img src="https://s1.ax1x.com/2023/04/11/ppLqmLV.png" alt="ppLqmLV.png"></a></p><p>然后输入如下代码：</p><p><code>pip install virtualenv</code></p><p><strong><em>注：virtualenv没有指定文件路径，请自行选择</em></strong></p><p>结果如下：</p><p><a href="https://imgse.com/i/ppLLJhQ"><img src="https://s1.ax1x.com/2023/04/11/ppLLJhQ.png" alt="ppLLJhQ.png"></a></p><p>然后我们自己创建一个文件夹，并进入该文件夹，用于创建虚拟环境。</p><p>创建虚拟环境，用一下指令：</p><p><code>virtualenv [环境名]</code></p><p>例：</p><p><code>virtualenv venv</code></p><p>接着激活环境，使用以下指令：</p><p><code>venv\scripts\activate</code></p><p>如下：</p><p><a href="https://imgse.com/i/ppLOKC4"><img src="https://s1.ax1x.com/2023/04/11/ppLOKC4.png" alt="ppLOKC4.png"></a></p><h1 id="2、安装flask"><a href="#2、安装flask" class="headerlink" title="2、安装flask"></a>2、安装flask</h1><p>激活虚拟环境后，在当前目录下，输入以下指令：</p><p><code>pip install flask</code></p><p>flask安装结束，如下：</p><p><img src="C:\Users\zi_feng\AppData\Roaming\Typora\typora-user-images\image-20230411150334107.png" alt="image-20230411150334107"></p>]]></content>
    
    
    <summary type="html">virtualenv虚拟环境的安装和flask的安装</summary>
    
    
    
    <category term="笔记" scheme="https://zi-feng-0109.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://zi-feng-0109.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>人工智能学习笔记</title>
    <link href="https://zi-feng-0109.github.io/posts/42d3d757.html"/>
    <id>https://zi-feng-0109.github.io/posts/42d3d757.html</id>
    <published>2022-11-04T16:00:00.000Z</published>
    <updated>2022-11-06T16:03:08.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="人工智能学习笔记"><a href="#人工智能学习笔记" class="headerlink" title="人工智能学习笔记"></a>人工智能学习笔记</h1><h2 id="一、多模态"><a href="#一、多模态" class="headerlink" title="一、多模态"></a>一、多模态</h2><h3 id="1、定义："><a href="#1、定义：" class="headerlink" title="1、定义："></a>1、定义：</h3><p>模态指的是承载数据的方式，可以是文本、视频、图像、音频等，多模态就是将各种类型的数据形式融合处理。</p><h3 id="2、当前，多模态学习主要研究方向有多模态表示学习、模态间映射，多模态对齐、融合、协同学习等："><a href="#2、当前，多模态学习主要研究方向有多模态表示学习、模态间映射，多模态对齐、融合、协同学习等：" class="headerlink" title="2、当前，多模态学习主要研究方向有多模态表示学习、模态间映射，多模态对齐、融合、协同学习等："></a>2、当前，多模态学习主要研究方向有多模态表示学习、模态间映射，多模态对齐、融合、协同学习等：</h3><h4 id="1-、多模态表示学习："><a href="#1-、多模态表示学习：" class="headerlink" title="(1)、多模态表示学习："></a>(1)、多模态表示学习：</h4><p>多模态表示学习，研究如何将多个模态数据所蕴含的语义信息数值化为实值向量，通俗理解就是对多个模态的数据进行相关性编码，让不同模态建立起映射关系。按多模态表示共享的方式，主要分为公共表示学习和特异性表示学习，后者由于是分别学习不同模态的特征，可以应用于诸如零次学习、模态间映射、跨模态检索等任务中。</p><h4 id="2-、模态间映射："><a href="#2-、模态间映射：" class="headerlink" title="(2)、模态间映射："></a>(2)、模态间映射：</h4><p>模态间映射，研究如何将某一特定模态数据中的信息映射至另一模态。例如，给定一幅图像，通过机器学习得到这副图像的描述，或者给定一段文字，生成一幅匹配的图像。类似于我们学习中遇到的“看图说话”和“以题作画”的问题。模态间映射早已可以应用于语音合成、图像视频描述以及跨模态检索等应用中。</p><h4 id="3-、多模态对齐："><a href="#3-、多模态对齐：" class="headerlink" title="(3)、多模态对齐："></a>(3)、多模态对齐：</h4><p>多模态对齐，主要研究如何识别不同模态之间的部件、元素的对应关系，以促进学习到的多模态表示更加精确，例如将电影画面、口型、语音、字幕的自动对齐。</p><h4 id="4-、多模态融合："><a href="#4-、多模态融合：" class="headerlink" title="(4)、多模态融合："></a>(4)、多模态融合：</h4><p>多模态融合，主要致力于不同模态间的模型与特征的整合，以获得更全面的特征，提高模型鲁棒性，并且保证模型在某些模态缺失时仍能有效工作。</p><h4 id="5-、多模态协同学习："><a href="#5-、多模态协同学习：" class="headerlink" title="(5)、多模态协同学习："></a>(5)、多模态协同学习：</h4><p>多模态协同学习，主要考虑如何从信息丰富模态上学习的知识迁移到信息匮乏的模态，使各个模态的学习互相辅助。典型的方法包括多模态的零样本学习、领域自适应等。</p><h3 id="3、应用场景："><a href="#3、应用场景：" class="headerlink" title="3、应用场景："></a>3、应用场景：</h3><p>机器翻译(包括文本、图像、语言)、唇语识别、图片语义分割、智能对话、人体状态观测(包括表情、动作、体态、情绪等)、智能汽车、搜索平台的多种模态之间相互检索、购物平台的推荐系统、物联网系统中各种传感器间的多模态交互等。</p><p><a href="https://imgse.com/i/xjBE7V"><img src="https://s1.ax1x.com/2022/11/06/xjBE7V.png" alt="xjBE7V.png"></a></p><h2 id="二、transforms"><a href="#二、transforms" class="headerlink" title="二、transforms"></a>二、transforms</h2><h3 id="1、裁剪-Crop"><a href="#1、裁剪-Crop" class="headerlink" title="1、裁剪-Crop"></a>1、裁剪-Crop</h3><p>中心裁剪：transforms.CenterCrop</p><p>随机裁剪：transforms.RandomCrop</p><p>随机长宽比裁剪：transforms.RandomResizedCrop</p><p>上下左右中心裁剪：transforms.FiveCrop</p><p>上下左右中心裁剪后翻转，transforms.TenCrop</p><h3 id="2、翻转和旋转——Flip-and-Rotation"><a href="#2、翻转和旋转——Flip-and-Rotation" class="headerlink" title="2、翻转和旋转——Flip and Rotation"></a>2、翻转和旋转——Flip and Rotation</h3><p>依概率p水平翻转：transforms.RandomHorizontalFlip(p=0.5)</p><p>依概率p垂直翻转：transforms.RandomVerticalFlip(p=0.5)</p><p>随机旋转：transforms.RandomRotation</p><h3 id="3、图像变换"><a href="#3、图像变换" class="headerlink" title="3、图像变换"></a>3、图像变换</h3><p>resize：transforms.Resize<br>标准化：transforms.Normalize<br>转为tensor，并归一化至[0-1]：transforms.ToTensor<br>填充：transforms.Pad<br>修改亮度、对比度和饱和度：transforms.ColorJitter<br>转灰度图：transforms.Grayscale<br>线性变换：transforms.LinearTransformation()<br>仿射变换：transforms.RandomAffine<br>依概率p转为灰度图：transforms.RandomGrayscale<br>将数据转换为PILImage：transforms.ToPILImage<br>transforms.Lambda：Apply a user-defined lambda as a transform.</p><h3 id="4、对transforms操作，使数据增强更灵活"><a href="#4、对transforms操作，使数据增强更灵活" class="headerlink" title="4、对transforms操作，使数据增强更灵活"></a>4、对transforms操作，使数据增强更灵活</h3><p>transforms.RandomChoice(transforms)， 从给定的一系列transforms中选一个进行操作</p><p>transforms.RandomApply(transforms, p=0.5)，给一个transform加上概率，依概率进行操作</p><p>transforms.RandomOrder，将transforms中的操作随机打乱</p>]]></content>
    
    
    <summary type="html">人工智能学习笔记</summary>
    
    
    
    <category term="笔记" scheme="https://zi-feng-0109.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://zi-feng-0109.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>专业版pycharm的安装，破解与汉化</title>
    <link href="https://zi-feng-0109.github.io/posts/afc0d8aa.html"/>
    <id>https://zi-feng-0109.github.io/posts/afc0d8aa.html</id>
    <published>2022-10-31T13:12:14.000Z</published>
    <updated>2022-10-31T13:48:09.454Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="专业版pycharm的安装，破解与汉化"><a href="#专业版pycharm的安装，破解与汉化" class="headerlink" title="专业版pycharm的安装，破解与汉化"></a>专业版pycharm的安装，破解与汉化</h1><p><strong>注：本篇博客参考微信公众号：软件管家。</strong></p><p><strong>演示系统：64位win10</strong></p><h2 id="安装pycharm"><a href="#安装pycharm" class="headerlink" title="安装pycharm"></a>安装pycharm</h2><p>首先需要大家下载一个压缩包，博主这里提供两个途径：</p><p><a href="https://pan.baidu.com/s/1nD60lutLhWsxjNhrcp9YNg">百度云盘点我(提取码：6666)</a></p><p><a href="https://www.aliyundrive.com/s/RKqgqEWV55e">阿里云盘点我</a></p><p><strong>注：百度云盘限速，阿里云盘不限速，文件大小300+MB。</strong></p><h3 id="下载完成后解压，得到如下文件，我们以管理员身份运行第二个文件："><a href="#下载完成后解压，得到如下文件，我们以管理员身份运行第二个文件：" class="headerlink" title="下载完成后解压，得到如下文件，我们以管理员身份运行第二个文件："></a>下载完成后解压，得到如下文件，我们以管理员身份运行第二个文件：</h3><p><a href="https://imgse.com/i/xTMtUJ"><img src="https://s1.ax1x.com/2022/10/31/xTMtUJ.jpg" alt="xTMtUJ.jpg"></a></p><h3 id="然后点击next，这一步我们换一下安装路径，尽量不要装在C盘。注意安装路径不能有中文！！！"><a href="#然后点击next，这一步我们换一下安装路径，尽量不要装在C盘。注意安装路径不能有中文！！！" class="headerlink" title="然后点击next，这一步我们换一下安装路径，尽量不要装在C盘。注意安装路径不能有中文！！！"></a>然后点击next，这一步我们换一下安装路径，尽量不要装在C盘。<strong>注意安装路径不能有中文！！！</strong></h3><p><a href="https://imgse.com/i/xTMg5d"><img src="https://s1.ax1x.com/2022/10/31/xTMg5d.png" alt="xTMg5d.png"></a></p><h3 id="选好安装路径后，来到这个页面，全部勾上。"><a href="#选好安装路径后，来到这个页面，全部勾上。" class="headerlink" title="选好安装路径后，来到这个页面，全部勾上。"></a>选好安装路径后，来到这个页面，全部勾上。</h3><p><a href="https://imgse.com/i/xTMHaQ"><img src="https://s1.ax1x.com/2022/10/31/xTMHaQ.png" alt="xTMHaQ.png"></a></p><h3 id="点击next后点击install开始安装，安装完成后选择finish并且重启电脑。"><a href="#点击next后点击install开始安装，安装完成后选择finish并且重启电脑。" class="headerlink" title="点击next后点击install开始安装，安装完成后选择finish并且重启电脑。"></a>点击next后点击install开始安装，安装完成后选择finish并且重启电脑。</h3><p><a href="https://imgse.com/i/xTMxMV"><img src="https://s1.ax1x.com/2022/10/31/xTMxMV.png" alt="xTMxMV.png"></a></p><p><strong>安装到这里就完成了，下面是破解过程。</strong></p><h2 id="破解pycharm"><a href="#破解pycharm" class="headerlink" title="破解pycharm"></a>破解pycharm</h2><h2 id="双击运行pycharm，然后我们选择如下："><a href="#双击运行pycharm，然后我们选择如下：" class="headerlink" title="双击运行pycharm，然后我们选择如下："></a>双击运行pycharm，然后我们选择如下：</h2><p><img src="https://s1.ax1x.com/2022/10/31/xTQmqO.png" alt="img"></p><h3 id="然后我们选择左下角的跳过。"><a href="#然后我们选择左下角的跳过。" class="headerlink" title="然后我们选择左下角的跳过。"></a>然后我们选择左下角的跳过。</h3><p><a href="https://imgse.com/i/xTQadg"><img src="https://s1.ax1x.com/2022/10/31/xTQadg.png" alt="xTQadg.png"></a></p><h3 id="然后我们选择”Evaluate-for-free”，然后点击Evaluate。"><a href="#然后我们选择”Evaluate-for-free”，然后点击Evaluate。" class="headerlink" title="然后我们选择”Evaluate for free”，然后点击Evaluate。"></a>然后我们选择”Evaluate for free”，然后点击Evaluate。</h3><p><a href="https://imgse.com/i/xTQyQ0"><img src="https://s1.ax1x.com/2022/10/31/xTQyQ0.png" alt="xTQyQ0.png"></a></p><h3 id="然后我们打开刚刚的解压的文件夹，将图中的文件拖入pycharm的窗口。"><a href="#然后我们打开刚刚的解压的文件夹，将图中的文件拖入pycharm的窗口。" class="headerlink" title="然后我们打开刚刚的解压的文件夹，将图中的文件拖入pycharm的窗口。"></a>然后我们打开刚刚的解压的文件夹，将图中的文件拖入pycharm的窗口。</h3><p><a href="https://imgse.com/i/xTQ7y6"><img src="https://s1.ax1x.com/2022/10/31/xTQ7y6.png" alt="xTQ7y6.png"></a></p><h3 id="然后它会提示让我们重启软件，那我们就选择重启。"><a href="#然后它会提示让我们重启软件，那我们就选择重启。" class="headerlink" title="然后它会提示让我们重启软件，那我们就选择重启。"></a>然后它会提示让我们重启软件，那我们就选择重启。</h3><p><a href="https://imgse.com/i/xTlplt"><img src="https://s1.ax1x.com/2022/10/31/xTlplt.png" alt="xTlplt.png"></a></p><h3 id="重启过程中会出现如下图所示场景，我们点击-“-为pycharm安装-”-。"><a href="#重启过程中会出现如下图所示场景，我们点击-“-为pycharm安装-”-。" class="headerlink" title="重启过程中会出现如下图所示场景，我们点击 “ 为pycharm安装 ” 。"></a>重启过程中会出现如下图所示场景，我们点击 “ 为pycharm安装 ” 。</h3><p><a href="https://imgse.com/i/xTlmpn"><img src="https://s1.ax1x.com/2022/10/31/xTlmpn.png" alt="xTlmpn.png"></a></p><h3 id="这时又会遇到一次重启，这次我们点击完-“-是-”-后如果没有自动重启，我们需要手动重启电脑。"><a href="#这时又会遇到一次重启，这次我们点击完-“-是-”-后如果没有自动重启，我们需要手动重启电脑。" class="headerlink" title="这时又会遇到一次重启，这次我们点击完 “ 是 ” 后如果没有自动重启，我们需要手动重启电脑。"></a>这时又会遇到一次重启，这次我们点击完 “ 是 ” 后如果没有自动重启，我们需要手动重启电脑。</h3><p><strong>注意不是重启软件，是重启电脑！！！</strong></p><p><a href="https://imgse.com/i/xTl8k4"><img src="https://s1.ax1x.com/2022/10/31/xTl8k4.png" alt="xTl8k4.png"></a></p><h3 id="重启完电脑，再次打开pycharm，我们会发现不会和第一次打开那样要激活了。"><a href="#重启完电脑，再次打开pycharm，我们会发现不会和第一次打开那样要激活了。" class="headerlink" title="重启完电脑，再次打开pycharm，我们会发现不会和第一次打开那样要激活了。"></a>重启完电脑，再次打开pycharm，我们会发现不会和第一次打开那样要激活了。</h3><p><a href="https://imgse.com/i/xTlrAe"><img src="https://s1.ax1x.com/2022/10/31/xTlrAe.png" alt="xTlrAe.png"></a></p><p><strong>破解pycharm完成，下面是汉化pycharm的过程。</strong></p><h2 id="汉化pycharm"><a href="#汉化pycharm" class="headerlink" title="汉化pycharm"></a>汉化pycharm</h2><h3 id="我们打开下载压缩包解压的文件夹，选择剩下的第三个文件，复制。"><a href="#我们打开下载压缩包解压的文件夹，选择剩下的第三个文件，复制。" class="headerlink" title="我们打开下载压缩包解压的文件夹，选择剩下的第三个文件，复制。"></a>我们打开下载压缩包解压的文件夹，选择剩下的第三个文件，复制。</h3><p><a href="https://imgse.com/i/xTlhB8"><img src="https://s1.ax1x.com/2022/10/31/xTlhB8.png" alt="xTlhB8.png"></a></p><h3 id="然后回到桌面，右键pycharm，点击-“打开文件所在位置-”，然后我们点击下面我框起来的文件夹（即进入上一级文件夹）。"><a href="#然后回到桌面，右键pycharm，点击-“打开文件所在位置-”，然后我们点击下面我框起来的文件夹（即进入上一级文件夹）。" class="headerlink" title="然后回到桌面，右键pycharm，点击 “打开文件所在位置 ”，然后我们点击下面我框起来的文件夹（即进入上一级文件夹）。"></a>然后回到桌面，右键pycharm，点击 “打开文件所在位置 ”，然后我们点击下面我框起来的文件夹（即进入上一级文件夹）。</h3><p><a href="https://imgse.com/i/xTlXuV"><img src="https://s1.ax1x.com/2022/10/31/xTlXuV.png" alt="xTlXuV.png"></a></p><h3 id="然后我们进入lib文件夹，把刚刚复制的文件粘贴到这个文件夹内。"><a href="#然后我们进入lib文件夹，把刚刚复制的文件粘贴到这个文件夹内。" class="headerlink" title="然后我们进入lib文件夹，把刚刚复制的文件粘贴到这个文件夹内。"></a>然后我们进入lib文件夹，把刚刚复制的文件粘贴到这个文件夹内。</h3><p><a href="https://imgse.com/i/xT1Au6"><img src="https://s1.ax1x.com/2022/10/31/xT1Au6.png" alt="xT1Au6.png"></a></p><h3 id="重启pycharm会发现如下图已经汉化完成。"><a href="#重启pycharm会发现如下图已经汉化完成。" class="headerlink" title="重启pycharm会发现如下图已经汉化完成。"></a>重启pycharm会发现如下图已经汉化完成。</h3><p><a href="https://imgse.com/i/xT15Kx"><img src="https://s1.ax1x.com/2022/10/31/xT15Kx.png" alt="xT15Kx.png"></a></p><p><strong>这就是专业版pycharm的安装，破解和汉化教程了，大家有任何问题欢迎评论区提问。</strong></p>]]></content>
    
    
    <summary type="html">关于专业版pycharm的安装，破解与汉化的一个办法</summary>
    
    
    
    <category term="技术愚见" scheme="https://zi-feng-0109.github.io/categories/%E6%8A%80%E6%9C%AF%E6%84%9A%E8%A7%81/"/>
    
    
    <category term="技术愚见" scheme="https://zi-feng-0109.github.io/tags/%E6%8A%80%E6%9C%AF%E6%84%9A%E8%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>关于使用anaconda和安装pytorch时出现的一些报错</title>
    <link href="https://zi-feng-0109.github.io/posts/2116512d.html"/>
    <id>https://zi-feng-0109.github.io/posts/2116512d.html</id>
    <published>2022-10-30T23:29:42.000Z</published>
    <updated>2022-11-01T07:59:59.200Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1、This-transaction-has-incompatible-packages-due-to-a-shared-path"><a href="#1、This-transaction-has-incompatible-packages-due-to-a-shared-path" class="headerlink" title="1、This transaction has incompatible packages due to a shared path."></a>1、This transaction has incompatible packages due to a shared path.</h1><p><a href="https://imgse.com/i/xouLHH"><img src="https://s1.ax1x.com/2022/10/31/xouLHH.png" alt="xouLHH.png"></a></p><h2 id="原因：这是因为你的conda的包版本有点低，自动更新无法使用。"><a href="#原因：这是因为你的conda的包版本有点低，自动更新无法使用。" class="headerlink" title="原因：这是因为你的conda的包版本有点低，自动更新无法使用。"></a>原因：这是因为你的conda的包版本有点低，自动更新无法使用。</h2><p><strong>注：即使你下载的是最新版本的anaconda也可能出现此问题，同样可以按照下面方法解决。</strong></p><h2 id="解决方案，先净化anaconda，然后更新conda的所有库。"><a href="#解决方案，先净化anaconda，然后更新conda的所有库。" class="headerlink" title="解决方案，先净化anaconda，然后更新conda的所有库。"></a>解决方案，先净化anaconda，然后更新conda的所有库。</h2><p>指令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda clean --all</span><br><span class="line">conda update --all</span><br></pre></td></tr></table></figure><h1 id="2、The-current-user-does-not-have-write-permissions-to-the-target-environment"><a href="#2、The-current-user-does-not-have-write-permissions-to-the-target-environment" class="headerlink" title="2、The current user does not have write permissions to the target environment."></a>2、The current user does not have write permissions to the target environment.</h1><p><a href="https://imgse.com/i/xouXEd"><img src="https://s1.ax1x.com/2022/10/31/xouXEd.jpg" alt="xouXEd.jpg"></a></p><h2 id="原因：从报错语句翻译即可得知：你没有写入目标环境的权限。意思就是anaconda文件夹的访问权限没打开。"><a href="#原因：从报错语句翻译即可得知：你没有写入目标环境的权限。意思就是anaconda文件夹的访问权限没打开。" class="headerlink" title="原因：从报错语句翻译即可得知：你没有写入目标环境的权限。意思就是anaconda文件夹的访问权限没打开。"></a>原因：从报错语句翻译即可得知：你没有写入目标环境的权限。意思就是anaconda文件夹的访问权限没打开。</h2><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><h3 id="1、找到你的anaconda文件夹，一般命令行内会给出，就如上面的命令行，报错语句的下一行就给出了anaconda文件夹的位置。"><a href="#1、找到你的anaconda文件夹，一般命令行内会给出，就如上面的命令行，报错语句的下一行就给出了anaconda文件夹的位置。" class="headerlink" title="1、找到你的anaconda文件夹，一般命令行内会给出，就如上面的命令行，报错语句的下一行就给出了anaconda文件夹的位置。"></a>1、找到你的anaconda文件夹，一般命令行内会给出，就如上面的命令行，报错语句的下一行就给出了anaconda文件夹的位置。</h3><h3 id="2、右键该文件夹，点击属性后选择上面的-“安全”-。"><a href="#2、右键该文件夹，点击属性后选择上面的-“安全”-。" class="headerlink" title="2、右键该文件夹，点击属性后选择上面的  “安全” 。"></a>2、右键该文件夹，点击属性后选择上面的  “安全” 。</h3><p><a href="https://imgse.com/i/xoKiDg"><img src="https://s1.ax1x.com/2022/10/31/xoKiDg.png" alt="xoKiDg.png"></a></p><h3 id="3、点击中间的-“编辑”-按钮，把√全都打上。"><a href="#3、点击中间的-“编辑”-按钮，把√全都打上。" class="headerlink" title="3、点击中间的 “编辑” 按钮，把√全都打上。"></a>3、点击中间的 “编辑” 按钮，把√全都打上。</h3><p><a href="https://imgse.com/i/xoKV5n"><img src="https://s1.ax1x.com/2022/10/31/xoKV5n.png" alt="xoKV5n.png"></a></p><p>OK，完成。</p><h2 id="3、anaconda安装后没有配置环境变量。"><a href="#3、anaconda安装后没有配置环境变量。" class="headerlink" title="3、anaconda安装后没有配置环境变量。"></a>3、anaconda安装后没有配置环境变量。</h2><h3 id="错误表现："><a href="#错误表现：" class="headerlink" title="错误表现："></a>错误表现：</h3><p>输入conda显示：</p><p>“conda”不是内部或外部命令，也不是可运行的程序<br>或批处理文件。</p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>没有配置anaconda的环境变量。</p><h3 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h3><p>1、在桌面右键此电脑，选择属性。</p><p>2、右边界面拉到最下面选择“高级系统设置”。</p><p><img src="C:\Users\zi_feng\AppData\Roaming\Typora\typora-user-images\image-20221101155810313.png" alt="image-20221101155810313"></p><p>3、</p><p><strong>······持续更新中。</strong></p>]]></content>
    
    
    <summary type="html">关于使用anaconda和安装pytorch时出现的一些报错</summary>
    
    
    
    <category term="技术愚见" scheme="https://zi-feng-0109.github.io/categories/%E6%8A%80%E6%9C%AF%E6%84%9A%E8%A7%81/"/>
    
    
    <category term="技术愚见" scheme="https://zi-feng-0109.github.io/tags/%E6%8A%80%E6%9C%AF%E6%84%9A%E8%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>安装pytorch的gpu版本和一些问题的解决办法</title>
    <link href="https://zi-feng-0109.github.io/posts/e01775ae.html"/>
    <id>https://zi-feng-0109.github.io/posts/e01775ae.html</id>
    <published>2022-10-27T16:00:00.000Z</published>
    <updated>2022-10-28T16:20:39.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装pytorch的gpu版本和一些问题的解决办法"><a href="#安装pytorch的gpu版本和一些问题的解决办法" class="headerlink" title="安装pytorch的gpu版本和一些问题的解决办法"></a>安装pytorch的gpu版本和一些问题的解决办法</h1><h2 id="1、安装anaconda："><a href="#1、安装anaconda：" class="headerlink" title="1、安装anaconda："></a>1、安装anaconda：</h2><p>我们使用anaconda来安装pytorch，<del>至于为什么不用pip或者其他包管理工具，这边请您出门右转，不想多解释了。</del></p><h3 id="a、安装"><a href="#a、安装" class="headerlink" title="a、安装"></a>a、安装</h3><p>首先我们来到anaconda的镜像下载网站(使用官网下载比较慢，如果你会魔法当我没说)</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">anaconda的镜像下载站点击此处</a></p><p>博主这里以64位Windows10系统为例。</p><p>注意看旁边的发行日期，选择自己合适的，博主这里选择anaconda3-2022.10安装。</p><p><a href="https://imgse.com/i/x4sDT1"><img src="https://s1.ax1x.com/2022/10/28/x4sDT1.png" alt="x4sDT1.png"></a></p><p>注：安装过程中会让你选择安装地址，anaconda3一开始不打，但是随着使用，会越来越大，所以建议不要安装在C盘</p><h3 id="b、然后是给anaconda3换源："><a href="#b、然后是给anaconda3换源：" class="headerlink" title="b、然后是给anaconda3换源："></a>b、然后是给anaconda3换源：</h3><p>anaconda本来的源在国外，下载都会很慢，所以我们换用国内的源，这里我们选用清华的镜像源。</p><p>打开cmd，输入conda info即可看到当前的channel，接下来我们在cmd里输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ </span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p>然后打开.condarc问件(文件位置位于C:\Users\用户名)，删去-default一行；</p><p>然后是一些创建、激活、关闭、删除环境的指令：</p><p>1、创建环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名</span><br></pre></td></tr></table></figure><p>2、激活环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Conda activate 环境名</span><br></pre></td></tr></table></figure><p>3、关闭环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate 环境名</span><br></pre></td></tr></table></figure><p>4、删除环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n 环境名 --all</span><br></pre></td></tr></table></figure><p>5、查看现有环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><h2 id="2、安装cuda和cudnn"><a href="#2、安装cuda和cudnn" class="headerlink" title="2、安装cuda和cudnn"></a>2、安装cuda和cudnn</h2><h3 id="a、安装cuda"><a href="#a、安装cuda" class="headerlink" title="a、安装cuda"></a>a、安装cuda</h3><p>安装cuda首先要确定本机的显卡驱动的版本号，在cmd输入nvidia-smi即可查看</p><p><a href="https://imgse.com/i/x4WM9I"><img src="https://s1.ax1x.com/2022/10/28/x4WM9I.png" alt="x4WM9I.png"></a></p><p>得到这个版本号后在如下的表中找到对应的cuda版本</p><p><a href="https://imgse.com/i/x4WNNj"><img src="https://s1.ax1x.com/2022/10/28/x4WNNj.png" alt="x4WNNj.png"></a></p><p>这里为了防止后续更新后此表落后，这里贴上表的来源网址。</p><p><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">点我看表</a></p><p>如果你的显卡驱动太低，可以先选择更新显卡驱动。</p><p>我这里就选择了CUDA-11.6安装</p><p><a href="https://developer.nvidia.com/cuda-toolkit-archive">点我跳转cuda安装地址</a></p><p>点上面的链接后跳转到如下页面，找到自己对应的版本，点击，我这里就选11.6.2了。</p><p><a href="https://imgse.com/i/x4fSr8"><img src="https://s1.ax1x.com/2022/10/28/x4fSr8.png" alt="x4fSr8.png"></a></p><p>点击后会进入一个如下的选择界面。</p><p>按照我如图的选择后会出现download按钮，点击即可下载。</p><p><a href="https://imgse.com/i/x4fkPs"><img src="https://s1.ax1x.com/2022/10/28/x4fkPs.png" alt="x4fkPs.png"></a></p><p>下载完成后，双击下载的文件即可开始安装，这里建议不要更改下载位置，因为我在安装过程中发现，即使我更改到其他盘，在安装后，我自己创建的那个文件夹直接不见，且C盘空间被占用，说明还是装到C盘了。这样的话由于我改过路径，花了好一会才找到文件，所以建议不要更改安装路径。</p><p>但是第二步选择时候，选择自定义安装，把除了CUDA的选项都去掉。同样会再次遇到一次配置路径的选择，还是不要改，但是要记住路径位置（下面一步要用）。接下来等就OK了。</p><p>测试安装是否成功：</p><p>在cmd中输入nvcc —version</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc --version</span><br></pre></td></tr></table></figure><p>如果正常出现版本号则说明安装成功。</p><p>如果没有，则去 “ NVIDIA GPU Computing Toolkit\CUDA\v11.6\bin ” 这个文件夹下检查有无nvcc.exe文件，有的话，复制上面的地址，给电脑加个环境变量，如果没有的话，说明安装失败。</p><h3 id="b、安装cudnn"><a href="#b、安装cudnn" class="headerlink" title="b、安装cudnn"></a>b、安装cudnn</h3><p><a href="https://developer.nvidia.com/rdp/cudnn-archive">点我进入下载cudnn的网站</a></p><p>注：下载cudnn需要登录英伟达账号，没有账号的同学请先注册。</p><p>找到对应自己cuda版本的点击下载。</p><p><a href="https://imgse.com/i/x4hVFH"><img src="https://s1.ax1x.com/2022/10/28/x4hVFH.png" alt="x4hVFH.png"></a></p><p>下载完成后解压获得：</p><p><a href="https://imgse.com/i/x4hUlq"><img src="https://s1.ax1x.com/2022/10/28/x4hUlq.png" alt="x4hUlq.png"></a></p><p>将bin、include、lib三个文件夹复制到cuda安装路径下同样有这个三个文件夹的目录下，中途应该会遇到 “ 你必须提供管理员资格··· ” 之类的话，直接点击 “ 允许 ” 或者 “ 继续 ” 之类选项。</p><p>这里检验下cudnn是否安装成功，从命令行进入 “ cuda安装位置\版本号\extras\demo_suite “ ,输入bandwidthTest.exe，见到Result = PASS则说明cudnn安装成功，如图。</p><p><a href="https://imgse.com/i/x4hgpR"><img src="https://s1.ax1x.com/2022/10/28/x4hgpR.png" alt="x4hgpR.png"></a></p><h2 id="3、安装pytorch"><a href="#3、安装pytorch" class="headerlink" title="3、安装pytorch"></a>3、安装pytorch</h2><p>推荐使用通过conda创建虚拟环境来安装pytorch。</p><p>首先创建虚拟环境，打开cmd，输入：conda create -n 环境名字 <a href="https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttp%3A//lib.csdn.net/base/python">python</a>=X.X。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n 环境名字 python=X.X</span><br></pre></td></tr></table></figure><p>然后激活环境，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 环境名</span><br></pre></td></tr></table></figure><p>进入下载pytorch的网站，查看安装指令。</p><p><a href="https://pytorch.org/get-started/locally/">点我进入网站</a></p><p><a href="https://imgse.com/i/x4425Q"><img src="https://s1.ax1x.com/2022/10/28/x4425Q.png" alt="x4425Q.png"></a></p><p>复制这个指令到刚刚激活了环境的cmd内回车，但是注意，这里-c pytorch 会走国外线路，原来换的源就没用了，同样的-c forge也会走</p><p>“ conda-forge ”的channel，我尝试过指删前者，发现会报错，安装失败，不删有要走外源，速度极慢，博主当时下了一晚上，结果timeout也同样失败，寄了，多次尝试后，我使用如下指令，安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit=版本号</span><br></pre></td></tr></table></figure><p>其实好像把后面两个-c都删了就可以了，有兴趣同学可以自行尝试。</p><p>安装完成后我们来测试一下，在cmd输入python，然后输入如下两个指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">torch.__version__</span><br></pre></td></tr></table></figure><p>正常运行，没有报错就说明安装成功了，这里我多引用了一次是我<del>手贱</del>多点了一次。</p><p><a href="https://imgse.com/i/x45nqf"><img src="https://s1.ax1x.com/2022/10/28/x45nqf.png" alt="x45nqf.png"></a></p><p>OK，今天的pytorch安装就到这里了，我过程中还遇到过许多报错，但是现在忘了，如果大家遇到报错可以在评论区提出来，博主看到会在力所能及范围内解答。</p>]]></content>
    
    
    <summary type="html">安装pytorch的gpu版本和一些问题的解决办法</summary>
    
    
    
    <category term="技术愚见" scheme="https://zi-feng-0109.github.io/categories/%E6%8A%80%E6%9C%AF%E6%84%9A%E8%A7%81/"/>
    
    
    <category term="技术愚见" scheme="https://zi-feng-0109.github.io/tags/%E6%8A%80%E6%9C%AF%E6%84%9A%E8%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>数据结构第二次实验</title>
    <link href="https://zi-feng-0109.github.io/posts/9a8ac3ad.html"/>
    <id>https://zi-feng-0109.github.io/posts/9a8ac3ad.html</id>
    <published>2022-10-04T16:00:00.000Z</published>
    <updated>2022-11-05T11:52:56.921Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1、顺序表逆置"><a href="#1、顺序表逆置" class="headerlink" title="1、顺序表逆置"></a>1、顺序表逆置</h1><p>设有一个线性表 (e0,e1, …, en-2, en-1) 存放在线性顺序表L中。请编写函数将这个线性表原地逆置，即将n个元素内容置换为 (en-1, en-2, …, e1, e0)。</p><p>函数原型为：void ReverseSqList(SqList &amp;L ){…}</p><p>首先构建顺序表：</p><p><img src="https://i.postimg.cc/jSDDbXtD/clip-image001.png" alt="img"></p><p>在创建时获得顺序表长度为n，顺序表为arr[100];</p><p>将n和arr[100]的首地址，即arr传入倒置函数ReverArr( n , arr );</p><p>倒置函数获得顺序表长度n后，计算得交换次数为j=n/2;</p><p>接下来用for(int i=0;i&lt;j;i++)遍历顺序表，并每一次遍历时，将顺序表前部分数据和后部分数据调换，即</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">temp = arr[i];</span><br><span class="line"></span><br><span class="line">  arr[i] = arr[n - <span class="number">1</span> - i];</span><br><span class="line"></span><br><span class="line">  arr[n - <span class="number">1</span> - i] = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后遍历顺序表并输出即完成倒置；</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReverArr</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> arr[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">memset</span>(arr, <span class="string">&#x27;0&#x27;</span>, <span class="built_in">sizeof</span>(arr));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入线性表长度:&quot;</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;***********&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;***********&quot; &lt;&lt; endl;</span></span><br><span class="line">arr[i] =i+<span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; arr[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ReverArr</span>(n, arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReverArr</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> arr[])</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> j = n / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= j; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[n - <span class="number">1</span> - i];</span><br><span class="line">arr[n - <span class="number">1</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、链表逆置"><a href="#2、链表逆置" class="headerlink" title="2、链表逆置"></a>2、链表逆置</h1><p>将一个链表逆置，函数原型为：void ReverseLinkList(LinkList &amp;L)。</p><p><img src="https://i.postimg.cc/tTN3x51X/clip-image001.png" alt="img"></p><p><img src="https://i.postimg.cc/K8TgTNVd/clip-image003.png" alt="img"></p><p><img src="https://i.postimg.cc/0j3bMMCk/clip-image005.png" alt="img"></p><p>最后直到最后一个逆置结束就完成了整个链表的逆置。</p><p>全部代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*ReverseLinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">nizhi</span><span class="params">(ReverseLinkList L)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( )</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span>* <span class="title">head</span> =</span> (<span class="keyword">struct</span> ReverseLinkList*)<span class="built_in">malloc</span>(</span><br><span class="line">        <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ReverseLinkList));</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span>* <span class="title">p</span>;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入链表长度：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span>* <span class="title">s</span> =</span> (<span class="keyword">struct</span> ReverseLinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ReverseLinkList));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s-&gt;data);</span><br><span class="line">        s-&gt;next = head-&gt;next; </span><br><span class="line">        head-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p = head;</span><br><span class="line">    ReverseLinkList s = p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原链表为:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;next-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)<span class="built_in">printf</span>(<span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    nizhi(s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;逆置后的链表为：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (s-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, s-&gt;next-&gt;data);</span><br><span class="line">        s = s-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;next != <span class="literal">NULL</span>)<span class="built_in">printf</span>(<span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">nizhi</span><span class="params">(ReverseLinkList L)</span> &#123;</span><br><span class="line">    ReverseLinkList s, p;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        s = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、创建结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*ReverseLinkList;</span><br></pre></td></tr></table></figure><p>2、创建逆置函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">nizhi</span><span class="params">(ReverseLinkList L)</span> &#123;</span><br><span class="line">    ReverseLinkList s, p;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//建议结合上图一起看</span></span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        s = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( )</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span>* <span class="title">head</span> =</span> (<span class="keyword">struct</span> ReverseLinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ReverseLinkList));</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span>* <span class="title">p</span>;</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入链表长度：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入数据：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ReverseLinkList</span>* <span class="title">s</span> =</span> (<span class="keyword">struct</span> ReverseLinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ReverseLinkList));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s-&gt;data);</span><br><span class="line">        s-&gt;next = head-&gt;next; </span><br><span class="line">        head-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p = head;</span><br><span class="line">    ReverseLinkList s = p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原链表为:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;next-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)<span class="built_in">printf</span>(<span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    nizhi(s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;逆置后的链表为：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (s-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, s-&gt;next-&gt;data);</span><br><span class="line">        s = s-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;next != <span class="literal">NULL</span>)<span class="built_in">printf</span>(<span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、编程实现求两多项式的和多项式"><a href="#3、编程实现求两多项式的和多项式" class="headerlink" title="3、编程实现求两多项式的和多项式"></a>3、编程实现求两多项式的和多项式</h1><pre><code>A (x) = 7 + 3x + 9x8 + 5x17B (x) = 8x + 22x7 – 9x8</code></pre><p><img src="https://i.postimg.cc/mDFH3WmN/3-1.png" alt="img"></p><p><img src="https://i.postimg.cc/LXHs5dr8/3-2.png" alt="img"></p><p>全部代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//今天就写到这里了，累了，睡觉。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PPP</span>&#123;</span></span><br><span class="line">    <span class="type">float</span> XiShu;</span><br><span class="line">    <span class="type">int</span> ZhiShu;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PPP</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;PPP,*PList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatePPP</span><span class="params">(PList L, <span class="type">int</span> m)</span>; </span><br><span class="line"></span><br><span class="line">PList <span class="title function_">HeBingPPP</span><span class="params">(PList head_1 , PList head_2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintPPP_2</span><span class="params">(PList q)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintPPP_1</span><span class="params">(PList L)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    PList head_1,head_2,head_3;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入多项式A的项数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    head_1 = (PList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PPP));</span><br><span class="line">    CreatePPP(head_1,n);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入多项式B的项数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    head_2 = (PList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PPP));</span><br><span class="line">    CreatePPP(head_2,m);</span><br><span class="line">  </span><br><span class="line">    head_3 = HeBingPPP(head_1,head_2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n两个多项式合并后为：&quot;</span>);</span><br><span class="line">    PrintPPP_1(head_3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatePPP</span><span class="params">(PList L, <span class="type">int</span> m)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> XiShu;</span><br><span class="line">    <span class="type">int</span> ZhiShu;</span><br><span class="line">    PList tail,NewNext;</span><br><span class="line">    L-&gt;XiShu = m;</span><br><span class="line">    L-&gt;ZhiShu = <span class="number">-1</span>;</span><br><span class="line">    tail = L;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span> ; i&lt;=m ; i++)&#123;</span><br><span class="line">         NewNext = (PList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PPP));</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;请分别输入系数和指数:&quot;</span>);</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;XiShu);</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ZhiShu);</span><br><span class="line">         NewNext-&gt;XiShu = XiShu;</span><br><span class="line">         NewNext-&gt;ZhiShu = ZhiShu;</span><br><span class="line">         NewNext-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">         tail-&gt;next = NewNext;</span><br><span class="line">         tail = NewNext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PList <span class="title function_">HeBingPPP</span><span class="params">(PList head_1 , PList head_2)</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,len;</span><br><span class="line">    <span class="type">float</span> y;</span><br><span class="line">    PList head_3,pa,pb,pc,u;</span><br><span class="line">    head_3 = head_1;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    pc = head_3;</span><br><span class="line">   </span><br><span class="line">    pa = head_1-&gt;next;</span><br><span class="line">    pb = head_2-&gt;next;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(pa &amp;&amp; pb)&#123;</span><br><span class="line">        x = pa-&gt;ZhiShu-pb-&gt;ZhiShu;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        </span><br><span class="line">            pc = pa;</span><br><span class="line">            len++;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">            y = pa-&gt;XiShu + pb-&gt;XiShu;</span><br><span class="line">            <span class="keyword">if</span>(y!=<span class="number">0.0</span>)&#123;</span><br><span class="line">            </span><br><span class="line">                pa-&gt;XiShu = y;</span><br><span class="line">                pc = pa;</span><br><span class="line">                len++;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                pc-&gt;next=pa-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(pa);</span><br><span class="line">            &#125;</span><br><span class="line">       </span><br><span class="line">            pa = pc-&gt;next;</span><br><span class="line">            u = pb;</span><br><span class="line">            pb = pb -&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            u = pb-&gt;next;</span><br><span class="line">            pb-&gt;next= pa;</span><br><span class="line">            pc-&gt;next=pb;</span><br><span class="line">            pc = pb;</span><br><span class="line">            len++;</span><br><span class="line">            pb = u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span>(pb)&#123;</span><br><span class="line">        pc-&gt;next = pb;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(pc)&#123;</span><br><span class="line">        pc = pc-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pc)&#123;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    head_3-&gt;XiShu = len;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">free</span>(head_2);</span><br><span class="line">    <span class="keyword">return</span> head_3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintPPP_2</span><span class="params">(PList q)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;ZhiShu == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.0f&quot;</span>,q-&gt;XiShu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(q-&gt;ZhiShu == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;XiShu == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (q-&gt;XiShu == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-X&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.0f&quot;</span>,q-&gt;XiShu);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;X&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (q-&gt;XiShu == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;X^%d&quot;</span>,q-&gt;ZhiShu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(q-&gt;XiShu == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-X^%d&quot;</span>,q-&gt;ZhiShu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.0fX^%d&quot;</span>,q-&gt;XiShu,q-&gt;ZhiShu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintPPP_1</span><span class="params">(PList L)</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    PList p;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            PrintPPP_2(p);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;XiShu&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">            PrintPPP_2(p);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            PrintPPP_2(p);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数据结构第二次实验</summary>
    
    
    
    <category term="作业" scheme="https://zi-feng-0109.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="作业" scheme="https://zi-feng-0109.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>数据结构第一次实验</title>
    <link href="https://zi-feng-0109.github.io/posts/d8da9ae2.html"/>
    <id>https://zi-feng-0109.github.io/posts/d8da9ae2.html</id>
    <published>2022-09-20T16:00:00.000Z</published>
    <updated>2023-04-11T07:08:55.612Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1、编程实现："><a href="#1、编程实现：" class="headerlink" title="1、编程实现："></a>1、编程实现：</h1><h2 id="（1）在顺序表ajcniydu的第三个位置插入p。"><a href="#（1）在顺序表ajcniydu的第三个位置插入p。" class="headerlink" title="（1）在顺序表ajcniydu的第三个位置插入p。"></a>（1）在顺序表ajcniydu的第三个位置插入p。</h2><p>首先构建顺序表arr1[10]</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center">c</td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td></tr></tbody></table></div><p>找到第三个位置</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center"><em>2</em></th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center"><em>c</em></td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td></tr></tbody></table></div><p>从arr[2]开始每个元素往后移一位</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center"><em>2</em></th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center"><em>c</em></td><td style="text-align:center">c</td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td></tr></tbody></table></div><p>在arr[2]处插入p</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center"><em>2</em></th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center"><em>p</em></td><td style="text-align:center">c</td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td></tr></tbody></table></div><p>附代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码过于简单，不做解释。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">10</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;u&#x27;</span> &#125;;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;插入前:&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>; i &gt; <span class="number">2</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">arr1[i] = arr1[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr1[<span class="number">2</span>] = <span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">cout &lt;&lt;endl&lt;&lt; <span class="string">&quot;插入后:&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（2）删除顺序表ajcniydu第三个位置的元素。"><a href="#（2）删除顺序表ajcniydu第三个位置的元素。" class="headerlink" title="（2）删除顺序表ajcniydu第三个位置的元素。"></a>（2）删除顺序表ajcniydu第三个位置的元素。</h2><p>首先构建顺序表arr1[10]</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center">c</td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td></tr></tbody></table></div><p>找到第三个位置</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center">c</td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td></tr></tbody></table></div><p>从arr[2]开始，arr[i]=arr[i+1]直到arr[6]=arr[7]</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td><td style="text-align:center">u</td></tr></tbody></table></div><p>最后让arr[7]=’\0’；</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td></tr></tbody></table></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//与上一题一样，不做解释</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">10</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;u&#x27;</span> &#125;;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除前：&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">cout &lt;&lt; arr1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">arr1[i] = arr1[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">arr1[<span class="number">7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;删除后：&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">cout &lt;&lt; arr1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、编程实现将顺序表acdijtuy和cfklns合并。"><a href="#2、编程实现将顺序表acdijtuy和cfklns合并。" class="headerlink" title="2、编程实现将顺序表acdijtuy和cfklns合并。"></a>2、编程实现将顺序表acdijtuy和cfklns合并。</h1><p>创建顺序表arr[20]和arr2[10]</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center">c</td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">c</td><td style="text-align:center">f</td><td style="text-align:center">k</td><td style="text-align:center">l</td><td style="text-align:center">n</td><td style="text-align:center">s</td></tr></tbody></table></div><p>用strlen函数获取arr和arr2的字符串长度得8和6</p><p>从arr[8]开始到arr[13]，令arr[i]=arr2[i-8]。</p><div class="table-container"><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th><th style="text-align:center">11</th><th style="text-align:center">12</th><th style="text-align:center">13</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">j</td><td style="text-align:center">c</td><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">y</td><td style="text-align:center">d</td><td style="text-align:center">u</td><td style="text-align:center">c</td><td style="text-align:center">f</td><td style="text-align:center">k</td><td style="text-align:center">l</td><td style="text-align:center">n</td><td style="text-align:center">s</td></tr></tbody></table></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不做解释</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">20</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;y&#x27;</span> &#125;;</span><br><span class="line"><span class="type">char</span> arr2[<span class="number">10</span>] = &#123; <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;s &#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = arr2[i - <span class="number">8</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、编程实现：在链表asdfghjkl的第四个位置插入z。"><a href="#3、编程实现：在链表asdfghjkl的第四个位置插入z。" class="headerlink" title="3、编程实现：在链表asdfghjkl的第四个位置插入z。"></a>3、编程实现：在链表asdfghjkl的第四个位置插入z。</h1><p>创建链表并初始化，然后创建添加元素的函数</p><p>（图中没有头节点）</p><p><img src="https://i.postimg.cc/d1t7g9xS/clip-image002.jpg" alt="img"></p><p>申请一个新的内存用于存放z</p><p>（图中没有头节点）</p><p>将z所在结构体的next等于第三个结构体的next，第三个next重新赋值指向z所在结构体。</p><p>（图中没有头节点）</p><p><img src="https://i.postimg.cc/zBBBxGys/clip-image003.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全部代码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;ListNode, LinkNode;</span><br><span class="line"></span><br><span class="line">ListNode* <span class="title function_">HeadNode</span><span class="params">()</span>;</span><br><span class="line">ListNode* <span class="title function_">LinkInsert</span><span class="params">(ListNode* head, <span class="type">int</span> index, <span class="type">char</span> data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">10</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;z&#x27;</span>&#125;;</span><br><span class="line">ListNode* head_1 = HeadNode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">LinkInsert(head_1, i, arr1[i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;插入前链表为：head&quot;</span>);</span><br><span class="line"> <span class="keyword">while</span> (head_1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&gt;%c&quot;</span>, head_1-&gt;data);</span><br><span class="line">head_1 = head_1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">head_1=LinkInsert(head_1, <span class="number">4</span>, arr1[<span class="number">9</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入后链表为：head&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (head_1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&gt;%c&quot;</span>, head_1-&gt;data);</span><br><span class="line">head_1 = head_1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ListNode* <span class="title function_">HeadNode</span><span class="params">()</span> &#123;</span><br><span class="line">ListNode* head = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode* <span class="title function_">LinkInsert</span><span class="params">(ListNode* head, <span class="type">int</span> index, <span class="type">char</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">ListNode* p; p = head;</span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m &lt; index - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">ListNode* q = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;data = data;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、创建结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;ListNode, LinkNode;</span><br></pre></td></tr></table></figure><p>2、创建并初始化头节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">HeadNode</span><span class="params">()</span> &#123;</span><br><span class="line">ListNode* head = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、建立插入函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">LinkInsert</span><span class="params">(ListNode* head, <span class="type">int</span> index, <span class="type">char</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//head为要被执行插入的链表的头节点</span></span><br><span class="line">    <span class="comment">//index为要插入的位置</span></span><br><span class="line">    <span class="comment">//data是要插入位置的数据</span></span><br><span class="line">ListNode* p; p = head;<span class="comment">//创建一个数据类型为ListNode*的p，指向链表起始位置</span></span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m &lt; index - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//每一次循环p会到下一个节点，通过m和index控制传递几次，定位到要插入的位置</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">ListNode* q = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));<span class="comment">//申请一个新节点q用于存入要插入节点</span></span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;data = data;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">10</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;z&#x27;</span>&#125;;</span><br><span class="line">ListNode* head_1 = HeadNode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">LinkInsert(head_1, i, arr1[i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;插入前链表为：head&quot;</span>);</span><br><span class="line"> <span class="keyword">while</span> (head_1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&gt;%c&quot;</span>, head_1-&gt;data);</span><br><span class="line">head_1 = head_1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">head_1=LinkInsert(head_1, <span class="number">4</span>, arr1[<span class="number">9</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;插入后链表为：head&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (head_1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&gt;%c&quot;</span>, head_1-&gt;data);</span><br><span class="line">head_1 = head_1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、编程实现两个有序链表adfi和cefi的合并。"><a href="#4、编程实现两个有序链表adfi和cefi的合并。" class="headerlink" title="4、编程实现两个有序链表adfi和cefi的合并。"></a>4、编程实现两个有序链表adfi和cefi的合并。</h1><p>创建并初始化链表</p><p>传入数据</p><p><img src="https://i.postimg.cc/25bDXLkN/clip-image002.jpg" alt="img"></p><p>令i所在结构体的next=第二个头节点的next;</p><p>释放第二个头节点</p><p><img src="https://i.postimg.cc/8PZgpmsV/clip-image003.png" alt="img"></p><p>全部代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;ListNode, *LinkNode;</span><br><span class="line"></span><br><span class="line">ListNode* <span class="title function_">HeadNode</span><span class="params">()</span>;</span><br><span class="line">ListNode* <span class="title function_">LinkInsert</span><span class="params">(ListNode* head, <span class="type">int</span> index, <span class="type">char</span> data)</span>;</span><br><span class="line">ListNode* <span class="title function_">HeBing</span><span class="params">(ListNode* head_1, ListNode* head_2, ListNode* head_3)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">4</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;i&#x27;</span> &#125;;</span><br><span class="line"><span class="type">char</span> arr2[<span class="number">4</span>] = &#123; <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;i&#x27;</span> &#125;;</span><br><span class="line">ListNode* head_1 = HeadNode();</span><br><span class="line">ListNode* head_2 = HeadNode();</span><br><span class="line">ListNode* head_3 = HeadNode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">LinkInsert(head_1, i, arr1[i - <span class="number">1</span>]);</span><br><span class="line">LinkInsert(head_2, i, arr2[i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">HeBing(head_1, head_2, head_3);</span><br><span class="line"><span class="comment">//打印合并后列表</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;合并后列表为：head&quot;</span>);</span><br><span class="line">head_3 = head_3-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (head_3 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&gt;%c&quot;</span>, head_3-&gt;data);</span><br><span class="line">head_3 = head_3-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ListNode* <span class="title function_">HeadNode</span><span class="params">()</span> &#123;</span><br><span class="line">ListNode* head = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode* <span class="title function_">LinkInsert</span><span class="params">(ListNode* head, <span class="type">int</span> index, <span class="type">char</span> data)</span> </span><br><span class="line">&#123;</span><br><span class="line">ListNode* p; p = head;</span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m &lt; index - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">ListNode* q = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;data = data;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ListNode* <span class="title function_">HeBing</span><span class="params">(ListNode* head_1, ListNode* head_2, ListNode* head_3)</span></span><br><span class="line">&#123;</span><br><span class="line">ListNode* p1, * p2, * p3;</span><br><span class="line">p1 = head_1-&gt;next, p2 = head_2-&gt;next; p3 = head_3;</span><br><span class="line"><span class="keyword">while</span> (p1 != <span class="literal">NULL</span> &amp;&amp; p2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p1-&gt;data &lt;= p2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">p3-&gt;next = p1;</span><br><span class="line">p3 = p3-&gt;next;</span><br><span class="line">p1 = p1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p3-&gt;next = p2;</span><br><span class="line">p3 = p3-&gt;next;</span><br><span class="line">p2 = p2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head_3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、创建结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;ListNode, *LinkNode;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、创建并初始化头节点函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">HeadNode</span><span class="params">()</span> &#123;</span><br><span class="line">ListNode* head = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建插入函数（用于传入链表的数据）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">LinkInsert</span><span class="params">(ListNode* head, <span class="type">int</span> index, <span class="type">char</span> data)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//上面那题写完就来顺便拿来用了</span></span><br><span class="line">ListNode* p; p = head;</span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m &lt; index - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line">ListNode* q = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;data = data;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、合并链表函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">HeBing</span><span class="params">(ListNode* head_1, ListNode* head_2, ListNode* head_3)</span></span><br><span class="line">&#123;</span><br><span class="line">ListNode* p1, * p2, * p3;</span><br><span class="line">p1 = head_1-&gt;next, p2 = head_2-&gt;next; p3 = head_3;</span><br><span class="line"><span class="keyword">while</span> (p1 != <span class="literal">NULL</span> &amp;&amp; p2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p1-&gt;data &lt;= p2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">p3-&gt;next = p1;</span><br><span class="line">p3 = p3-&gt;next;</span><br><span class="line">p1 = p1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p3-&gt;next = p2;</span><br><span class="line">p3 = p3-&gt;next;</span><br><span class="line">p2 = p2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head_3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> arr1[<span class="number">4</span>] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;i&#x27;</span> &#125;;</span><br><span class="line"><span class="type">char</span> arr2[<span class="number">4</span>] = &#123; <span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;i&#x27;</span> &#125;;</span><br><span class="line">ListNode* head_1 = HeadNode();</span><br><span class="line">ListNode* head_2 = HeadNode();</span><br><span class="line">ListNode* head_3 = HeadNode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">LinkInsert(head_1, i, arr1[i - <span class="number">1</span>]);</span><br><span class="line">LinkInsert(head_2, i, arr2[i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">HeBing(head_1, head_2, head_3);</span><br><span class="line"><span class="comment">//打印合并后列表</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;合并后列表为：head&quot;</span>);</span><br><span class="line">head_3 = head_3-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (head_3 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&gt;%c&quot;</span>, head_3-&gt;data);</span><br><span class="line">head_3 = head_3-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数据结构第一次实验</summary>
    
    
    
    <category term="作业" scheme="https://zi-feng-0109.github.io/categories/%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="作业" scheme="https://zi-feng-0109.github.io/tags/%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
</feed>
